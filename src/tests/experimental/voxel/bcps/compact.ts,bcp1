import { ADDRESS_BYTES_PER_ELEMENT, ReadAddress, TAllocFunction, WriteAddress } from './memory-address';
import {
  IsSubOctreeAddressIndexAVoxelOctreeAddress, WriteSubOctreeAddressIndexAsVoxelMaterial
} from './sub-octree-adress-index';
import {
  AreSameMaterials, CopyMaterial, NO_MATERIAL_ADDRESS, VOXEL_MATERIAL_BYTES_PER_ELEMENT, VoxelMaterial
} from './material';
import {
  CreateMappedMemories, GetOrCreateMappedMemoryAddressesFromMappedMemories, MapMemory, ResolveMappedAddress,
  TMappedMemories, TMappedMemoryAddresses
} from './mapped-memory';
import { CopyRemappedVoxelOctree, VOXEL_OCTREE_BYTES_PER_ELEMENT, VoxelOctree } from './octree';
import { LogMemory } from './abstract-memory';

export function RemapOctree(
  sourceMemory: Uint8Array,
  sourceAddress: number,
  destinationMemory: Uint8Array,
  destinationAddress: number,
  alloc: TAllocFunction,
  addressesMap: TMappedMemoryAddresses,
): void {
  let subOctreeAddress: number = sourceAddress + 1;
  let _address: number;
  let _mappedAddress: number;

  for (let i = 0; i < 8; i++) { // for each sub-tree
    _address = ReadAddress(sourceMemory, subOctreeAddress);

    if (addressesMap.has())


    if (IsSubOctreeAddressIndexAVoxelOctreeAddress(sourceMemory, sourceAddress, i)) {
      RemapOctree(sourceMemory, _address, destinationMemory, destinationAddress, alloc, addressesMap);
    } else if (_address !== NO_MATERIAL_ADDRESS) {
      materials.add(_address);
    }
    subOctreeAddress += ADDRESS_BYTES_PER_ELEMENT;
  }
}

/******* MATERIALS *******/

/**
 * Returns the list a material addresses, used by a VoxelOctree
 */
export function ListVoxelOctreeMaterialAddresses(
  memory: Uint8Array,
  address: number,
  materials: Set<number> = new Set<number>()
): Set<number> {
  let subOctreeAddress: number = address + 1;
  let _address: number;
  for (let i = 0; i < 8; i++) { // for each sub-tree
    _address = ReadAddress(memory, subOctreeAddress);
    if (IsSubOctreeAddressIndexAVoxelOctreeAddress(memory, address, i)) {
      ListVoxelOctreeMaterialAddresses(memory, _address, materials);
    } else if (_address !== NO_MATERIAL_ADDRESS) {
      materials.add(_address);
    }
    subOctreeAddress += ADDRESS_BYTES_PER_ELEMENT;
  }
  return materials;
}


export interface CompactSizeOptions {
  compactTime?: number;
  originalSize?: number;
}

/**
 * Reduces the complexity of a list of Materials by removing duplicates,
 * and writes them into a new memory
 */
export function CompactMaterialsByRemovingDuplicates(
  memory: Uint8Array,
  alloc: TAllocFunction,
  materials: VoxelMaterial[], // assumes memory and address already resolved
  memoriesMap: TMappedMemories
): TMappedMemories {
  const materialsLength: number = materials.length;
  const available: boolean[] = new Array(materialsLength).fill(true);
  for (let i = 0, l = materialsLength; i < l; i++) {
    if (available[i]) {
      const material1: VoxelMaterial = materials[i];
      const newAddress: number = alloc(VOXEL_MATERIAL_BYTES_PER_ELEMENT);
      CopyMaterial(material1.memory, material1.address, memory, newAddress);
      MapMemory(material1.memory, material1.address, newAddress, memoriesMap);

      for (let j = i + 1; j < materialsLength; j++) {
        if (available[j]) {
          const material2: VoxelMaterial = materials[j];
          if (AreSameMaterials(material1.memory, material1.address, material2.memory, material2.address)) {
            MapMemory(material2.memory, material2.address, newAddress, memoriesMap, false);
            available[j] = false;
          }
        }
      }
    }
  }
  return memoriesMap;
}

/**
 * Reduces the complexity of a list of Materials by removing duplicated and unused ones
 */
export function CompactMaterialsFromVoxelOctrees(
  memory: Uint8Array,
  alloc: TAllocFunction,
  octrees: VoxelOctree[],
): TMappedMemories {
  // list all used materials
  const usedMaterials: VoxelMaterial[] = [];
  for (let i = 0, l = octrees.length; i < l; i++) {
    const octree: VoxelOctree = octrees[i];
    const iterator: Iterator<number> = ListVoxelOctreeMaterialAddresses(octree.memory, octree.address)[Symbol.iterator]();
    let result: IteratorResult<number>;
    while (!(result = iterator.next()).done) {
      usedMaterials.push(new VoxelMaterial(octree.memory, result.value));
    }
  }
  // compact materials into the new memory by removing redundant ones
  return CompactMaterialsByRemovingDuplicates(memory, alloc, usedMaterials, CreateMappedMemories());
}


/******* OCTREES *******/

export const EMPTY_MAPPED_MEMORY_ADDRESSES_MAP = new Map<number, number>();

/**
 * Reduces the complexity of a Voxel Octree by grouping child Materials
 *  - if the 8 child materials are the same, the octree may be removed by replacing its address in its parent by the material address
 *  - we may replace fully transparent materials by NO_MATERIAL_ADDRESS
 *  - INFO: destructive for original memory
 */
function CompactVoxelOctreeByGroupingMaterials(
  memory: Uint8Array,
  address: number,
  addressesMap: TMappedMemoryAddresses,
): number | null {

  let subOctreeAddress: number = address + 1;
  let _address: number;
  // the common address
  // undefined => not computed
  // null => no common addresses
  // number => common address
  let commonAddress: number | null | undefined = void 0;
  let compactedAddress: number | null;

  for (let i = 0; i < 8; i++) {
    _address = ReadAddress(memory, subOctreeAddress);
    compactedAddress = ResolveMappedAddress(_address, addressesMap);

    if (IsSubOctreeAddressIndexAVoxelOctreeAddress(memory, address, i)) {
      compactedAddress = CompactVoxelOctreeByGroupingMaterials(memory, compactedAddress, addressesMap);

      if (compactedAddress === null) {
        commonAddress = null;
      } else { // here the sub-octree returned a value so it can be merged
        WriteSubOctreeAddressIndexAsVoxelMaterial(memory, address, i); // TODO wrong !
        addressesMap.set(_address, compactedAddress);
        // WriteAddress(memory, subOctreeAddress, compactedAddress);
      }
    } else {
      if (memory[compactedAddress + 3] === 0) { // full transparent => reduce to NO_MATERIAL_ADDRESS
        compactedAddress = NO_MATERIAL_ADDRESS;
        addressesMap.set(_address, NO_MATERIAL_ADDRESS);
        // WriteAddress(memory, subOctreeAddress, compactedAddress);
      }
    }

    if (commonAddress === void 0) {
      commonAddress = compactedAddress;
    } else if ((commonAddress !== null) && (compactedAddress !== commonAddress)) {
      commonAddress = null;
    }

    subOctreeAddress += ADDRESS_BYTES_PER_ELEMENT;
  }

  return commonAddress as (number | null);
}


/**
 * Reduces the complexity of an Octree by merging same composing Materials
 *  - INFO: non destructive for original memory, but mutates it
 */
function CompactVoxelOctreesByGroupingMaterials(
  octrees: VoxelOctree[],
  memoriesMap: TMappedMemories,
): void {
  for (let i = 0, l = octrees.length; i < l; i++) {
    const octree: VoxelOctree = octrees[i];
    CompactVoxelOctreeByGroupingMaterials(
      octree.memory,
      octree.address,
      GetOrCreateMappedMemoryAddressesFromMappedMemories(octree.memory, memoriesMap)
    );
  }
}



/*----------*/

export type TOctreeAddressToParentOctreeAddresses = Map<number, Set<number>>; // Map<address, parentAddresses[]>
export type TOctreeMetaData = TOctreeAddressToParentOctreeAddresses[]; // TOctreeAddressToParentOctreesAddress[depth]
export type TOctreesMetaDataOptimized = Uint32Array[]; // array[depth]

export const NO_PARENT_VALUE = 0xffffffff;

export function GenerateOctreeMetaData(
  memory: Uint8Array,
  address: number,
  depth: number,
  metaData: TOctreeMetaData = Array.from({ length: depth + 1 }, () => new Map<number, Set<number>>()),
  parentChunkIndex: number = NO_PARENT_VALUE
): TOctreeMetaData {
  const map: Map<number, Set<number>> = metaData[depth];

  let _address: number = address + 1;

  if (map.has(address)) {
    (map.get(address) as Set<number>).add(parentChunkIndex);
  } else {
    const set: Set<number> = new Set<number>();
    map.set(address, set);
    set.add(parentChunkIndex);

    for (let i = 0; i < 8; i++) {
      if (IsSubOctreeAddressIndexAVoxelOctreeAddress(memory, address, i)) {
        GenerateOctreeMetaData(memory, ReadAddress(memory, _address), depth - 1, metaData, _address);
      }
      _address += ADDRESS_BYTES_PER_ELEMENT;
    }
  }

  return metaData;
}


export function GenerateOctreesMetaData(
  octrees: VoxelOctree[],
): TOctreeMetaData[] {
  return octrees.map((octree: VoxelOctree) => {
    return GenerateOctreeMetaData(octree.memory, octree.address, octree.depth);
  });
}

export function OptimizeOctreesMetaDataFormat(
  metaDataList: TOctreeMetaData[]
): TOctreesMetaDataOptimized {
  let maxDepth: number = 0;
  const metaDataListLength: number = metaDataList.length;
  for (let i = 0; i < metaDataListLength; i++) {
    maxDepth = Math.max(maxDepth, metaDataList[i].length - 1);
  }
  const maxDepthPlusOne: number = maxDepth + 1;
  const output: TOctreesMetaDataOptimized = Array.from({ length: maxDepthPlusOne });

  // data structure:  DATA_LENGTH, OCTREE_INDEX, OCTREE_ADDRESS, [PARENT_INDEX_0, PARENT_INDEX_1, ...], ... (repeat)]

  for (let depth = 0; depth < maxDepthPlusOne; depth++) {

    // first compute size to allocate
    let size: number = 0;
    for (let metaDataListIndex = 0; metaDataListIndex < metaDataListLength; metaDataListIndex++) {
      const map: TOctreeAddressToParentOctreeAddresses = metaDataList[metaDataListIndex][depth];
      const values: IterableIterator<Set<number>> = map.values();
      let value: IteratorResult<Set<number>>;
      while (!((value = values.next()).done)) {
        size += 3 + value.value.size;
      }
    }

    // then create memory buffer and fill the data
    const data: Uint32Array = new Uint32Array(size);
    let i: number = 0;

    for (let metaDataListIndex = 0; metaDataListIndex < metaDataListLength; metaDataListIndex++) {
      const map: TOctreeAddressToParentOctreeAddresses = metaDataList[metaDataListIndex][depth];
      const entries: IterableIterator<[number, Set<number>]> = map.entries();
      let entry: IteratorResult<[number, Set<number>]>;
      while (!((entry = entries.next()).done)) {
        const set: Set<number> = entry.value[1];
        data[i++] = 3 + set.size;
        data[i++] = metaDataListIndex;
        data[i++] = entry.value[0];
        const parentIndexesIterator: Iterator<number> = set[Symbol.iterator]();
        let parentIndexesIteratorResult: IteratorResult<number>;
        while (!(parentIndexesIteratorResult = parentIndexesIterator.next()).done) {
          data[i++] = parentIndexesIteratorResult.value;
        }
      }
    }

    output[depth] = data;
  }

  return output;
}

/*---*/

export function CompactVoxelOctreesByRemovingDuplicates(
  memory: Uint8Array,
  alloc: TAllocFunction,
  octrees: VoxelOctree[],
  memoriesMap: TMappedMemories,
  options: CompactSizeOptions = {},
): VoxelOctree[] {
  const compactTime = (options.compactTime === void 0)
    ? Number.POSITIVE_INFINITY
    : Number(options.compactTime);

  const endTime: number = Date.now() + compactTime;
  const DISABLED_FLAG = 0x80000000;

  const newOctrees: VoxelOctree[] = octrees.map((octree: VoxelOctree) => {
    return new VoxelOctree(memory, NO_PARENT_VALUE, octree.depth);
  });

  const metaDataList: TOctreesMetaDataOptimized = OptimizeOctreesMetaDataFormat(GenerateOctreesMetaData(octrees));
  console.log(metaDataList);

  const metaDataListLength: number = metaDataList.length;

  // debugger;

  for (let depth = 0; depth < metaDataListLength; depth++) {
    const metaData: Uint32Array = metaDataList[depth];
    let i: number = 0;
    let metaDataLength: number = metaData.length;

    while (i < metaDataLength) {

      const metaDataFirstByte: number = metaData[i];
      const octreeMetaDataLength: number = metaDataFirstByte & 0x7fffffff;

      if (metaDataFirstByte & DISABLED_FLAG) { // is disabled
        i += octreeMetaDataLength;
      } else { // new octree
        i++;
        const octreeIndex: number = metaData[i++];
        const octreeMemory: Uint8Array = octrees[octreeIndex].memory;
        const octreeAddress: number = metaData[i++];

        console.log('octreeIndex', octreeIndex);
        console.log('octreeAddress', octreeAddress);

        // write octree in output memory
        const newOctreeAddress: number = alloc(VOXEL_OCTREE_BYTES_PER_ELEMENT);
        CopyRemappedVoxelOctree(octreeMemory, octreeAddress, memory, newOctreeAddress, memoriesMap);

        // update parent octree addresses
        let parentDataLength: number = octreeMetaDataLength - 3;
        while (parentDataLength--) {
          const parentAddress: number = metaData[i++];
          if (parentAddress === NO_PARENT_VALUE) {
            newOctrees[octreeIndex].address = newOctreeAddress;
          } else {
            MapMemory(octreeMemory, parentAddress, newOctreeAddress, memoriesMap);
            // WriteAddress(octreeMemory, parentAddress, newOctreeIndex);
          }
        }

        // let j: number = i;
        // while (j < metaDataLength) {
        //   if (Date.now() > endTime) {
        //     break;
        //   }
        //
        //   const _metaDataFirstByte: number = metaData[j];
        //   const _metaDataLength: number = _metaDataFirstByte & 0x7fffffff;
        //
        //   if (_metaDataFirstByte & DISABLED_FLAG) { // is disabled
        //     j += _metaDataLength;
        //   } else {
        //     const _octreeIndex: number = metaData[j + 1];
        //     const _octreeMemory: Uint8Array = octrees[_octreeIndex].memory;
        //     const _octreeAddress: number = metaData[j + 2];
        //     if (AreSameRemappedVoxelOctrees(octreeMemory, octreeAddress, _octreeMemory, _octreeAddress, memoriesMap)) { // all values equals => duplicate octree
        //       metaData[j] |= DISABLED_FLAG; // set disabled flag
        //       j += 2;
        //       // update parent meta addresses
        //       let _parentDataLength: number = _metaDataLength - 2;
        //       while (_parentDataLength--) {
        //         const _parentAddress: number = metaData[j++];
        //         if (_parentAddress === NO_PARENT_VALUE) {
        //           newOctrees[_octreeIndex].address = newOctreeIndex;
        //         } else {
        //           MapMemory(_octreeMemory, _parentAddress, newOctreeIndex, memoriesMap);
        //         }
        //       }
        //     } else {
        //       j += _metaDataLength;
        //     }
        //   }
        // }
      }
    }
  }

  return newOctrees;
}


export function CompactVoxelOctrees(
  memory: Uint8Array,
  alloc: TAllocFunction,
  octrees: VoxelOctree[],
  options: CompactSizeOptions = {},
): VoxelOctree[] {
  if (options.originalSize === void 0) {
    // compact materials into the new memory by removing duplicates and non used
    const memoriesMap: TMappedMemories = CompactMaterialsFromVoxelOctrees(memory, alloc, octrees);

    console.log(memoriesMap);

    LogMemory('memory after material compact', memory, alloc);

    debugger;

    // compact octrees by grouping their materials
    CompactVoxelOctreesByGroupingMaterials(octrees, memoriesMap);

    throw 'end';

    // return CompactVoxelOctreesByRemovingDuplicates(
    //   memory,
    //   alloc,
    //   octrees,
    //   memoriesMap,
    //   options
    // );
  } else {
    const size_before: number = options.originalSize;
    const _options: CompactSizeOptions = Object.assign({}, options, { originalSize: void 0 });
    const t1: number = Date.now();
    const compactedOctrees: VoxelOctree[] = CompactVoxelOctrees(memory, alloc, octrees, _options);
    const t2: number = Date.now();
    const size_after: number = alloc(0);
    const size_text3d: number = ((0x1 << (octrees[0].depth + 1)) ** 3) * VOXEL_MATERIAL_BYTES_PER_ELEMENT;

    console.log(
      `compact performance: ${ size_before } -> ${ size_after } (${ Math.round(size_after / size_before * 100) }%) in ${ t2 - t1 }ms`
      + `\n(text3d: ${ size_text3d } (${ Math.round(size_after / size_text3d * 100) }%))`
    );

    return compactedOctrees;
  }
}






